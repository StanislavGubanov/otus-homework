{
	"info": {
		"_postman_id": "02e9128f-8925-4784-b20e-66860f9faf51",
		"name": "Otus",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1507306"
	},
	"item": [
		{
			"name": "try user login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"check new user\", function () {    \r",
							"    if (pm.response.status === \"OK\") {\r",
							"      pm.collectionVariables.set(\"userAlreadyRegistered\", \"true\")\r",
							"    }\r",
							"    else {\r",
							"      pm.collectionVariables.set(\"userAlreadyRegistered\", \"false\")\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{newUsername}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{newPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {    \r",
							"    if (pm.collectionVariables.get(\"userAlreadyRegistered\") === \"false\")\r",
							"        pm.response.to.have.status(200)\r",
							"    else \r",
							"        pm.response.to.have.status(500)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user1\",\r\n    \"lastName\": \"Иванов\",\r\n    \"firstName\": \"Иван\",\r\n    \"password\": \"user1password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "user login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Authorization header is present\", function () {\r",
							"    pm.response.to.have.header(\"Authorization\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"user-token\", pm.response.headers.get(\"Authorization\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "user1",
							"type": "text"
						},
						{
							"key": "password",
							"value": "user1password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "builtin admin login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Authorization header is present\", function () {\r",
							"    pm.response.to.have.header(\"Authorization\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"admin-token\", pm.response.headers.get(\"Authorization\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "admin321",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users (no token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 unauthorized\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users (user token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"test get error message 'Access denied!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Access denied!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users (admin token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user detail (no token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 unauthorized\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/{{newUsername}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{newUsername}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get current user detail (user token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"test get error message 'Access denied!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"newUsername\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/{{newUsername}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{newUsername}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get current user detail (admin token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"test get error message 'Access denied!'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"newUsername\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/{{newUsername}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{newUsername}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "try get another user detail (user token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"test get error message 'Not found exception'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Not found exception\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/admin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user detail (user token)",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user-token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Петров\",\r\n    \"firstName\": \"Петр\",\r\n    \"email\": \"new@localhost.io\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/{{newUsername}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{newUsername}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user (admin token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/{{newUsername}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{newUsername}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework",
			"type": "string"
		},
		{
			"key": "newUsername",
			"value": "user1"
		},
		{
			"key": "newLastName",
			"value": "Иванов"
		},
		{
			"key": "newFirstName",
			"value": "Иван"
		},
		{
			"key": "newPassword",
			"value": "user1password"
		},
		{
			"key": "user-token",
			"value": "after-user-login"
		},
		{
			"key": "admin-token",
			"value": "after-admin-login"
		},
		{
			"key": "userAlreadyRegistered",
			"value": "false"
		}
	]
}